// automatically generated by the FlatBuffers compiler, do not modify

package org.pinelang.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Expr : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Expr {
        __init(_i, _bb)
        return this
    }
    val expValueType : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun expValue(obj: Table) : Table? {
        val o = __offset(6); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsExpr(_bb: ByteBuffer): Expr = getRootAsExpr(_bb, Expr())
        fun getRootAsExpr(_bb: ByteBuffer, obj: Expr): Expr {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createExpr(builder: FlatBufferBuilder, expValueType: UByte, expValueOffset: Int) : Int {
            builder.startTable(2)
            addExpValue(builder, expValueOffset)
            addExpValueType(builder, expValueType)
            return endExpr(builder)
        }
        fun startExpr(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addExpValueType(builder: FlatBufferBuilder, expValueType: UByte) = builder.addByte(0, expValueType.toByte(), 0)
        fun addExpValue(builder: FlatBufferBuilder, expValue: Int) = builder.addOffset(1, expValue, 0)
        fun endExpr(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
