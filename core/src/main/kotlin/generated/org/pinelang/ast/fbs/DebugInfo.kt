// automatically generated by the FlatBuffers compiler, do not modify

package org.pinelang.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class DebugInfo : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : DebugInfo {
        __init(_i, _bb)
        return this
    }
    val range : org.pinelang.ast.fbs.Range? get() = range(org.pinelang.ast.fbs.Range())
    fun range(obj: org.pinelang.ast.fbs.Range) : org.pinelang.ast.fbs.Range? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(o + bb_pos, bb)
        } else {
            null
        }
    }
    val debugName : String?
        get() {
            val o = __offset(6)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val debugNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(6, 1)
    fun debugNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 6, 1)
    val debugType : String?
        get() {
            val o = __offset(8)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val debugTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(8, 1)
    fun debugTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 8, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsDebugInfo(_bb: ByteBuffer): DebugInfo = getRootAsDebugInfo(_bb, DebugInfo())
        fun getRootAsDebugInfo(_bb: ByteBuffer, obj: DebugInfo): DebugInfo {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun startDebugInfo(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addRange(builder: FlatBufferBuilder, range: Int) = builder.addStruct(0, range, 0)
        fun addDebugName(builder: FlatBufferBuilder, debugName: Int) = builder.addOffset(1, debugName, 0)
        fun addDebugType(builder: FlatBufferBuilder, debugType: Int) = builder.addOffset(2, debugType, 0)
        fun endDebugInfo(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
