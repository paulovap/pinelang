// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.fbs.ast

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class PrimitiveExpr : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PrimitiveExpr {
        __init(_i, _bb)
        return this
    }
    val type : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val boolValue : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val intValue : Int
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val doubleValue : Double
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val stringValue : String?
        get() {
            val o = __offset(12)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val stringValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun stringValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsPrimitiveExpr(_bb: ByteBuffer): PrimitiveExpr = getRootAsPrimitiveExpr(_bb, PrimitiveExpr())
        fun getRootAsPrimitiveExpr(_bb: ByteBuffer, obj: PrimitiveExpr): PrimitiveExpr {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPrimitiveExpr(builder: FlatBufferBuilder, type: Byte, boolValue: Byte, intValue: Int, doubleValue: Double, stringValueOffset: Int) : Int {
            builder.startTable(5)
            addDoubleValue(builder, doubleValue)
            addStringValue(builder, stringValueOffset)
            addIntValue(builder, intValue)
            addBoolValue(builder, boolValue)
            addType(builder, type)
            return endPrimitiveExpr(builder)
        }
        fun startPrimitiveExpr(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(0, type, 0)
        fun addBoolValue(builder: FlatBufferBuilder, boolValue: Byte) = builder.addByte(1, boolValue, 0)
        fun addIntValue(builder: FlatBufferBuilder, intValue: Int) = builder.addInt(2, intValue, 0)
        fun addDoubleValue(builder: FlatBufferBuilder, doubleValue: Double) = builder.addDouble(3, doubleValue, 0.0)
        fun addStringValue(builder: FlatBufferBuilder, stringValue: Int) = builder.addOffset(4, stringValue, 0)
        fun endPrimitiveExpr(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
