// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.fbs.ast

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Program : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Program {
        __init(_i, _bb)
        return this
    }
    val pos : Int
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsProgram(_bb: ByteBuffer): Program = getRootAsProgram(_bb, Program())
        fun getRootAsProgram(_bb: ByteBuffer, obj: Program): Program {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createProgram(builder: FlatBufferBuilder, pos: Int) : Int {
            builder.startTable(1)
            addPos(builder, pos)
            return endProgram(builder)
        }
        fun startProgram(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addPos(builder: FlatBufferBuilder, pos: Int) = builder.addInt(0, pos, 0)
        fun endProgram(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
        fun finishProgramBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finish(offset)
        fun finishSizePrefixedProgramBuffer(builder: FlatBufferBuilder, offset: Int) = builder.finishSizePrefixed(offset)
    }
}
