// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.fbs.ast

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class ObjectDefinition : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : ObjectDefinition {
        __init(_i, _bb)
        return this
    }
    val objectType : String?
        get() {
            val o = __offset(4)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val objectTypeAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun objectTypeInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val id : Long
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    fun children(j: Int) : com.pinescript.fbs.ast.ObjectDefinition? = children(com.pinescript.fbs.ast.ObjectDefinition(), j)
    fun children(obj: com.pinescript.fbs.ast.ObjectDefinition, j: Int) : com.pinescript.fbs.ast.ObjectDefinition? {
        val o = __offset(8)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val childrenLength : Int
        get() {
            val o = __offset(8); return if (o != 0) __vector_len(o) else 0
        }
    fun signals(j: Int) : com.pinescript.fbs.ast.SignalAssignment? = signals(com.pinescript.fbs.ast.SignalAssignment(), j)
    fun signals(obj: com.pinescript.fbs.ast.SignalAssignment, j: Int) : com.pinescript.fbs.ast.SignalAssignment? {
        val o = __offset(10)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val signalsLength : Int
        get() {
            val o = __offset(10); return if (o != 0) __vector_len(o) else 0
        }
    fun props(j: Int) : com.pinescript.fbs.ast.Prop? = props(com.pinescript.fbs.ast.Prop(), j)
    fun props(obj: com.pinescript.fbs.ast.Prop, j: Int) : com.pinescript.fbs.ast.Prop? {
        val o = __offset(12)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val propsLength : Int
        get() {
            val o = __offset(12); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsObjectDefinition(_bb: ByteBuffer): ObjectDefinition = getRootAsObjectDefinition(_bb, ObjectDefinition())
        fun getRootAsObjectDefinition(_bb: ByteBuffer, obj: ObjectDefinition): ObjectDefinition {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createObjectDefinition(builder: FlatBufferBuilder, objectTypeOffset: Int, id: Long, childrenOffset: Int, signalsOffset: Int, propsOffset: Int) : Int {
            builder.startTable(5)
            addId(builder, id)
            addProps(builder, propsOffset)
            addSignals(builder, signalsOffset)
            addChildren(builder, childrenOffset)
            addObjectType(builder, objectTypeOffset)
            return endObjectDefinition(builder)
        }
        fun startObjectDefinition(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addObjectType(builder: FlatBufferBuilder, objectType: Int) = builder.addOffset(0, objectType, 0)
        fun addId(builder: FlatBufferBuilder, id: Long) = builder.addLong(1, id, 0L)
        fun addChildren(builder: FlatBufferBuilder, children: Int) = builder.addOffset(2, children, 0)
        fun createChildrenVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startChildrenVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addSignals(builder: FlatBufferBuilder, signals: Int) = builder.addOffset(3, signals, 0)
        fun createSignalsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startSignalsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun addProps(builder: FlatBufferBuilder, props: Int) = builder.addOffset(4, props, 0)
        fun createPropsVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startPropsVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endObjectDefinition(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
