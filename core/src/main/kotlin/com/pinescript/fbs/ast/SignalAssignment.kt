// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.fbs.ast

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class SignalAssignment : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : SignalAssignment {
        __init(_i, _bb)
        return this
    }
    val id : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val expr : com.pinescript.fbs.ast.CallableExpr? get() = expr(com.pinescript.fbs.ast.CallableExpr())
    fun expr(obj: com.pinescript.fbs.ast.CallableExpr) : com.pinescript.fbs.ast.CallableExpr? {
        val o = __offset(6)
        return if (o != 0) {
            obj.__assign(__indirect(o + bb_pos), bb)
        } else {
            null
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsSignalAssignment(_bb: ByteBuffer): SignalAssignment = getRootAsSignalAssignment(_bb, SignalAssignment())
        fun getRootAsSignalAssignment(_bb: ByteBuffer, obj: SignalAssignment): SignalAssignment {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createSignalAssignment(builder: FlatBufferBuilder, id: Byte, exprOffset: Int) : Int {
            builder.startTable(2)
            addExpr(builder, exprOffset)
            addId(builder, id)
            return endSignalAssignment(builder)
        }
        fun startSignalAssignment(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addId(builder: FlatBufferBuilder, id: Byte) = builder.addByte(0, id, 0)
        fun addExpr(builder: FlatBufferBuilder, expr: Int) = builder.addOffset(1, expr, 0)
        fun endSignalAssignment(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
