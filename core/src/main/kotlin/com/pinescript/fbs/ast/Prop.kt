// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.fbs.ast

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Prop : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Prop {
        __init(_i, _bb)
        return this
    }
    val idx : Byte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val type : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val boolValue : Byte
        get() {
            val o = __offset(8)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    val intValue : Int
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos) else 0
        }
    val doubleValue : Double
        get() {
            val o = __offset(12)
            return if(o != 0) bb.getDouble(o + bb_pos) else 0.0
        }
    val stringValue : String?
        get() {
            val o = __offset(14)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val stringValueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(14, 1)
    fun stringValueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 14, 1)
    val exprValueType : UByte
        get() {
            val o = __offset(16)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun exprValue(obj: Table) : Table? {
        val o = __offset(18); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsProp(_bb: ByteBuffer): Prop = getRootAsProp(_bb, Prop())
        fun getRootAsProp(_bb: ByteBuffer, obj: Prop): Prop {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createProp(builder: FlatBufferBuilder, idx: Byte, type: Byte, boolValue: Byte, intValue: Int, doubleValue: Double, stringValueOffset: Int, exprValueType: UByte, exprValueOffset: Int) : Int {
            builder.startTable(8)
            addDoubleValue(builder, doubleValue)
            addExprValue(builder, exprValueOffset)
            addStringValue(builder, stringValueOffset)
            addIntValue(builder, intValue)
            addExprValueType(builder, exprValueType)
            addBoolValue(builder, boolValue)
            addType(builder, type)
            addIdx(builder, idx)
            return endProp(builder)
        }
        fun startProp(builder: FlatBufferBuilder) = builder.startTable(8)
        fun addIdx(builder: FlatBufferBuilder, idx: Byte) = builder.addByte(0, idx, 0)
        fun addType(builder: FlatBufferBuilder, type: Byte) = builder.addByte(1, type, 0)
        fun addBoolValue(builder: FlatBufferBuilder, boolValue: Byte) = builder.addByte(2, boolValue, 0)
        fun addIntValue(builder: FlatBufferBuilder, intValue: Int) = builder.addInt(3, intValue, 0)
        fun addDoubleValue(builder: FlatBufferBuilder, doubleValue: Double) = builder.addDouble(4, doubleValue, 0.0)
        fun addStringValue(builder: FlatBufferBuilder, stringValue: Int) = builder.addOffset(5, stringValue, 0)
        fun addExprValueType(builder: FlatBufferBuilder, exprValueType: UByte) = builder.addByte(6, exprValueType.toByte(), 0)
        fun addExprValue(builder: FlatBufferBuilder, exprValue: Int) = builder.addOffset(7, exprValue, 0)
        fun endProp(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
