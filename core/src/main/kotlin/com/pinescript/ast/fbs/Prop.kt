// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class Prop : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : Prop {
        __init(_i, _bb)
        return this
    }
    val idx : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val valueType : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun value(obj: Table) : Table? {
        val o = __offset(8); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val debugName : String?
        get() {
            val o = __offset(10)
            return if (o != 0) __string(o + bb_pos) else null
        }
    val debugNameAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(10, 1)
    fun debugNameInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 10, 1)
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsProp(_bb: ByteBuffer): Prop = getRootAsProp(_bb, Prop())
        fun getRootAsProp(_bb: ByteBuffer, obj: Prop): Prop {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createProp(builder: FlatBufferBuilder, idx: UByte, valueType: UByte, valueOffset: Int, debugNameOffset: Int) : Int {
            builder.startTable(4)
            addDebugName(builder, debugNameOffset)
            addValue(builder, valueOffset)
            addValueType(builder, valueType)
            addIdx(builder, idx)
            return endProp(builder)
        }
        fun startProp(builder: FlatBufferBuilder) = builder.startTable(4)
        fun addIdx(builder: FlatBufferBuilder, idx: UByte) = builder.addByte(0, idx.toByte(), 0)
        fun addValueType(builder: FlatBufferBuilder, valueType: UByte) = builder.addByte(1, valueType.toByte(), 0)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(2, value, 0)
        fun addDebugName(builder: FlatBufferBuilder, debugName: Int) = builder.addOffset(3, debugName, 0)
        fun endProp(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
