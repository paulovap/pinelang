// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class PropExpr : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : PropExpr {
        __init(_i, _bb)
        return this
    }
    val objId : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val propIdx : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsPropExpr(_bb: ByteBuffer): PropExpr = getRootAsPropExpr(_bb, PropExpr())
        fun getRootAsPropExpr(_bb: ByteBuffer, obj: PropExpr): PropExpr {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createPropExpr(builder: FlatBufferBuilder, objId: Long, propIdx: UByte) : Int {
            builder.startTable(2)
            addObjId(builder, objId)
            addPropIdx(builder, propIdx)
            return endPropExpr(builder)
        }
        fun startPropExpr(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addObjId(builder: FlatBufferBuilder, objId: Long) = builder.addLong(0, objId, 0L)
        fun addPropIdx(builder: FlatBufferBuilder, propIdx: UByte) = builder.addByte(1, propIdx.toByte(), 0)
        fun endPropExpr(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
