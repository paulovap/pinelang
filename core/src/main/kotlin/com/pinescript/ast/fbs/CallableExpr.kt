// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class CallableExpr : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : CallableExpr {
        __init(_i, _bb)
        return this
    }
    val objId : Long
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getLong(o + bb_pos) else 0L
        }
    val callIdx : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsCallableExpr(_bb: ByteBuffer): CallableExpr = getRootAsCallableExpr(_bb, CallableExpr())
        fun getRootAsCallableExpr(_bb: ByteBuffer, obj: CallableExpr): CallableExpr {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createCallableExpr(builder: FlatBufferBuilder, objId: Long, callIdx: UByte) : Int {
            builder.startTable(2)
            addObjId(builder, objId)
            addCallIdx(builder, callIdx)
            return endCallableExpr(builder)
        }
        fun startCallableExpr(builder: FlatBufferBuilder) = builder.startTable(2)
        fun addObjId(builder: FlatBufferBuilder, objId: Long) = builder.addLong(0, objId, 0L)
        fun addCallIdx(builder: FlatBufferBuilder, callIdx: UByte) = builder.addByte(1, callIdx.toByte(), 0)
        fun endCallableExpr(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
