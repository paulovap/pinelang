// automatically generated by the FlatBuffers compiler, do not modify

package com.pinescript.ast.fbs

import java.nio.*
import kotlin.math.sign
import com.google.flatbuffers.*

@Suppress("unused")
@ExperimentalUnsignedTypes
class BinaryExpr : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : BinaryExpr {
        __init(_i, _bb)
        return this
    }
    val op : UByte
        get() {
            val o = __offset(4)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    val leftType : UByte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun left(obj: Table) : Table? {
        val o = __offset(8); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    val rightType : UByte
        get() {
            val o = __offset(10)
            return if(o != 0) bb.get(o + bb_pos).toUByte() else 0u
        }
    fun right(obj: Table) : Table? {
        val o = __offset(12); return if (o != 0) __union(obj, o + bb_pos) else null
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_1_12_0()
        fun getRootAsBinaryExpr(_bb: ByteBuffer): BinaryExpr = getRootAsBinaryExpr(_bb, BinaryExpr())
        fun getRootAsBinaryExpr(_bb: ByteBuffer, obj: BinaryExpr): BinaryExpr {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createBinaryExpr(builder: FlatBufferBuilder, op: UByte, leftType: UByte, leftOffset: Int, rightType: UByte, rightOffset: Int) : Int {
            builder.startTable(5)
            addRight(builder, rightOffset)
            addLeft(builder, leftOffset)
            addRightType(builder, rightType)
            addLeftType(builder, leftType)
            addOp(builder, op)
            return endBinaryExpr(builder)
        }
        fun startBinaryExpr(builder: FlatBufferBuilder) = builder.startTable(5)
        fun addOp(builder: FlatBufferBuilder, op: UByte) = builder.addByte(0, op.toByte(), 0)
        fun addLeftType(builder: FlatBufferBuilder, leftType: UByte) = builder.addByte(1, leftType.toByte(), 0)
        fun addLeft(builder: FlatBufferBuilder, left: Int) = builder.addOffset(2, left, 0)
        fun addRightType(builder: FlatBufferBuilder, rightType: UByte) = builder.addByte(3, rightType.toByte(), 0)
        fun addRight(builder: FlatBufferBuilder, right: Int) = builder.addOffset(4, right, 0)
        fun endBinaryExpr(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}
