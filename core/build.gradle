buildscript {
    ext.kotlin_version = '1.3.71'
    ext.ktor_version = '1.3.2'
}

plugins {
    id 'java'
    id 'antlr'
    id 'org.jetbrains.kotlin.jvm'
}

sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

kotlin {
    experimental {
        coroutines "enable"
    }
    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
}

dependencies {

    // Ktor
    implementation "io.ktor:ktor:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation "io.ktor:ktor-gson:$ktor_version"
    implementation "io.ktor:ktor-network:$ktor_version"
    // Moshi
    implementation("com.squareup.moshi:moshi-kotlin:1.9.2")
    implementation("com.squareup.moshi:moshi:1.9.2")
    // Kotlin
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    compile "org.jetbrains.kotlin:kotlin-test-junit5"
    //implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    testCompile "org.antlr:antlr4-runtime:4.8"
    antlr "org.antlr:antlr4:4.8-1"
    compile "org.antlr:antlr4-runtime:4.8"
    testCompile 'junit:junit:4.12'
    compile group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '1.12.0'
    implementation 'net.sf.squirrel-sql.thirdparty-non-maven:com-fifesoft-rsyntaxtextarea:1.0.0'
}

generateGrammarSource {
    outputDirectory = file("src/main/java/com/pinescript/parser")
    arguments += ["-visitor", "-long-messages"]
}

task flatbuffer(type: Exec) {

    String inputDir = file('src/main/fbs')
    String outputDir = file("src/main/kotlin")
    String flatc = 'flatc'

    def fbsFiles = layout.files {file(inputDir).listFiles() } .filter{ File f -> f.name.endsWith(".fbs")}.toList()

    ignoreExitValue(true)

    standardOutput = new ByteArrayOutputStream()
    errorOutput = new ByteArrayOutputStream()
    commandLine flatc, '-o', outputDir, '--kotlin', fbsFiles[0]

    doLast {
        if (execResult.getExitValue() != 0) {
            println(standardOutput.toString())
            throw new GradleException("flatc command line failed")
        }
    }
}

compileKotlin {
    dependsOn flatbuffer
}