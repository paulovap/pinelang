plugins {
	id 'java'
	id 'antlr'
	id 'org.jetbrains.kotlin.jvm'
}

dependencies {

	// Moshi
	implementation("com.squareup.moshi:moshi-kotlin:1.9.2")
	implementation("com.squareup.moshi:moshi:1.9.2")
	// Kotlin
	implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
	implementation "org.jetbrains.kotlin:kotlin-test-junit5"

	// Antlr4
	testImplementation "org.antlr:antlr4-runtime:4.8"
	antlr "org.antlr:antlr4:4.8-1"
	implementation "org.antlr:antlr4-runtime:4.8"

	// Flatbuffers
	implementation group: 'com.google.flatbuffers', name: 'flatbuffers-java', version: '1.12.0'

	testImplementation 'junit:junit:4.13'
	implementation 'net.sf.squirrel-sql.thirdparty-non-maven:com-fifesoft-rsyntaxtextarea:1.0.0'
}

afterEvaluate { project ->
	project.tasks.dokka {
		outputDirectory = "$rootDir/docs/latest"
		outputFormat = 'gfm'
	}
}

generateGrammarSource {
	outputDirectory = file("src/main/java/org/pinelang/parser")
	arguments += ["-visitor", "-long-messages"]
}

task flatbuffer(type: Exec) {

	String inputDir = file('src/main/fbs')
	String outputDir = file("src/main/kotlin/generated/")
	String flatc = 'flatc'

	def fbsFiles = layout.files {file(inputDir).listFiles() } .filter{ File f -> f.name.endsWith(".fbs")}.toList()

	ignoreExitValue(true)

	standardOutput = new ByteArrayOutputStream()
	errorOutput = new ByteArrayOutputStream()
	commandLine flatc, '-o', outputDir, '--kotlin', fbsFiles[0]

	doFirst {
		delete "$outputDir/"
	}
	doLast {
		if (execResult.getExitValue() != 0) {
			println(standardOutput.toString())
			throw new GradleException("flatc command line failed")
		}
	}
}

compileKotlin {
//TODO: add a way to generate flatbuffers on circleCI
  dependsOn flatbuffer
  dependsOn generateGrammarSource
}
